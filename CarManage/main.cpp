#include "mainwindow.h"
#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;
    w.show();

    return a.exec();
}

void study()
{
    if(92)
    {
        //92 ui界面
    /*
        准备工作：
            1.新建项目，选用Qwindows的基类
            2.ui界面开始添加控件
        ui界面：
            1.添加标题（标签），俩弹簧，标签改字体大小（右下角font）
            2.添加栈容器：选用栈容器（stacked widget）：需要多个窗口切换
                1.容器改名：一个叫car 一个叫calc（统计，计算器用的）
                2.栈容器中加一个tool Box(抽屉式的可，自行查看啥样子
                3.添加一个text Edit 选中（按住ctrl即可多选）tool box与文本编辑区，上面有一个可拉动的布局符号点击（分列式水平布局）
                4.注意：
                    1.如果发现这俩右上不在car的目录下，选中剪切，然后点击car，再粘贴到car下，必须是car下
                    2.设置tool box的最小宽度，在min的上面可改sizepolicy 水平策略与text edit的为一样
                    3.修改按钮名称：tool box的两个按钮，选中一个，右下角Qtoolbox，改page，就是改按钮显示的内容

            3.tool box下添加标签与下拉框：
                1.数量那一行用到spin box，还有其他行
                2.每一行都单独水平布局，最后选中tool box垂直布局即可
                3.给一些控件，比如下拉框改名

    */
    }
    //ui界面初始化
    if(93 && 94)
    {
    /*
        1.菜单栏：
            1.菜单栏添加：销售管理
            2.下拉菜单栏添加a、b
            3.a、b右下角，text可修改显示内容
        2.菜单栏俩下拉选项，页面切换，即点击一个则跳到对应的窗口界面
            1.改名，如果右上改不了，最下方小窗口选中，右下能改
            2.最下方小窗口选中对应下拉菜单，选中对应的转到槽（默认信号即可）
            3.写俩下拉菜单的槽函数
        3.构造函数中，设置一个开始显示的页面（直接调用槽函数即可，槽函数能直接调用）
        4.调整布局，注意谁在谁下要清楚
    */
    /*
        关联数据库：
            1. .pro添加 QT += sql
            2.添加头文件，将打开数据库的逻辑封装到一个函数中，构造函数里调用即可
            3.解决第一个下拉框（初始化）
                    用到的知识与昨天可视化数据库类似 模型与视图
                    让下拉框关联到数据库的name那一列
    */
    }
    //下拉框操作
    if(95 && 96)
    {
    /*
        下拉框有的也叫集合框
        1.下拉框点击某一个时，下面的信息要跟着变化
        2.写下厂商下拉框的槽函数
            1.厂家下拉框 的槽函数，选择的信号为currentIndexChanged(QString)（当前显示的内容）
            2.分类处理：
                    1.第一个下拉选项就设置为初始化清零所有显示的数据
                    2.厂家的下拉选项选好以后，品牌的下拉选项就会自动更新
        3.当厂家、品牌的下拉选项确定好以后，会显示出对应的报价、剩余数量等信息
            1.品牌下拉框的槽函数
    */
    }
    //选择框操作
    if(97)
    {
    /*
        补充：
            1.当我们某个按钮或下拉框，转到槽，结果发现信号选错了，如果直接把槽函数删掉，会发现有报错提示，
                    解决：槽函数会有一个声明函数（头文件中），要在头文件中也要把它删掉
            2.开发中，是先把框架写好，然后一个一个的小功能添加，而不是先写小功能再搭框架
        实现功能展示：
            1.当选择好厂商、品牌，会有报价、剩余数量等信息更新
            2.而我们选择好销售的数量后，会自动显示所需金额，
            3.并且回车后，会将数据更新到数据库中，即剩余数量、已销售数更新
            4.并且窗口右侧的文本编辑区显示 日销售清单（当前销售情况）
            5.金额实时显示
        步骤：
            1.数量选择框--转到槽--选用valueschanged的信号
                    1.选择框选择了销售的数量后，剩余数量的显示会更新
                    2.要实时与数据库同步，所以要获取数据库内容，以数据库为准
                            若选择数目大于了 实际剩余数目，中断程序
                            给选择框设置最大值
                    3.金额实时显示
                            获取报价，报价 * 选择的数目 = 金额
            2.初始化时，无法选择销售数量的框，当选择了厂商与品牌之后，就能选择销售数量的框了
    */
    }
    //确定与取消按钮
    if(98 && 99 && 100)
    {
    /*
        流程：
            1.tool box中添加两按钮，改名，并布局
            2.取消按钮槽函数
                1.取消的话，直接调用此前厂家的槽函数即可，传参"请选择厂家" 保证它执行初始化
                2.问题是剩余数量似乎会出现错误数字
                        解决：找到调用剩余数量的代码位置，发现数量选择框的槽函数中有涉及
                            在那个槽函数中加上判断，即arg1 == 0的时候进行中断处理
                            然后取消按钮槽函数里，再初始化剩余数量为"0"
                            老师说还是有一点逻辑遗漏，叫我们回去再想想
            3.确定按钮槽函数：
                1.剩余数量，销售了多少要更新到数据库
                    1.获取窗口里的信息：销售数量、剩余数量
                    2.以前销量加上窗口里的销量，再存到数据库就可以了
                2.不能在销售数量为0的时候按确认按钮
                    1.初始化时将按钮改为不可按
                    2.数据选择的时候加上判断，如果数量为0，按钮不可按
                    3.且刚更新完（刚按完确认按纽），也要改为不可按
    */
    }
    //xml介绍
    if(101 && 102)
    {
    /*
        准备工作：
            1.项目文件.pro 添加 QT += xml
            2.目前学的在.pro添加的已经学完了，四种：C++11、sql、xml、network
        补充：
            1.ui文件是xml文件
            2.xml文件格式，html语言格式，创建txt文件改名为xml文件，notepad++打开，编码改为utf8格式
        流程：
            1.添加新文件--C++--C++ Class--基类不用选择（xml不用选）--不用继承任何东西（仅对本项目，以后工作可能用到）
            2.添加头文件，创建函数（用静态的话方便调用）
            3.创建XML空文件函数
                1.创建时注意分类，如果有了该文件则不创建
                2.创建xml文档对象--创建xml头部格式--追加元素
                    1.因为是一棵树，所以有了头部，要追加节点
                    2.项目以 ‘日销售清单’为父节点，然后追加节点
                3.然后在另一个源文件中添加我们写好的domxml.h 头文件
                4.然后在构造函数中写代码：在上一级目录下生成demo.xml文件（可指定路径）

    */
    //xml文件讲解
    /*
        <?xml version="1.0" encoding="UTF-8"?>
        <!-- 有头有尾 有开始标签，就有闭合标签  xml用来存储数据，
        标签可以任意定义（不能中文）
        html是显示数据，所以有自己的规则
        xml很灵活 人性化 安卓手机经常发现xml 并且支持很多语言如C
        用于存储数据，QT的.ui文件也是xml文件
        json也是类似于xml的语言--!>

        <root/>
            <stu id="1">
                <name>mike</name>
                <sex>female</sex>
                <score>10</score>
            </stu>
                <stu id="2">
                    <name>miing</name>
                    <sex>female</sex>
                    <score>13</score>
            </stu>
        <root>
        <info>
        </info>

        .ui进行任何修改，都会重新生成一个.ui（即xml文件）
        所以ui界面进行修改，xml文件会改变，直接改动xml，ui也会变
    */
    }
    //如何导入别人写好的类
    if(103)
    {
    /*
        剔除项目中的自写类：
            1.打开源文件所在目录，复制（剪切）一份保存着
            2.删除我们已经写好的domxml.h 与 domxml.cpp 选中右击--删除文件
            3.然后项目文件.pro中将 domxml.cpp  和 domxml.h 删除（否则此项目运行错误）
        如何导入别人写好的类：
            1.由于上面我们已经从项目中将类给剔除了，所以此时我们保存好的类，就相当于别人写好的类，我们可以学习如何导入
            2.项目右击--添加现有文件--选中之前保存好的.h与.cpp--添加
            3..pro会自动添加这两个文件，然后我们就可以直接使用了
    */
    }
    //xml
    if(104 && 105 && 106)
    {
    /*
        学习方式：
            1.知道流程怎么样，过程听懂了更好，
            2.接口API什么的都可以通过时间来练

        1.查看xml文件有无子节点，如下则无子节点（只有根节点）：
                <?xml version="1.0" encoding="UTF-8"?>
                <日销售清单/>

        2.没有子节点，则创建<日期>子节点
                QDomElement dateEmt = doc.createElement("日期");
        3.<日期>子节点中设定属性
                QDomAttr dateAttr = doc.createAttribute("date");
        4.给属性设置一个值
                dateAttr.setNodeValue(dateStr);
        5.把节点与属性关联起来
                dateEmt.setAttributeNode(dateAttr);
        6.在<日期>节点后创建<时间>节点元素
        7.<时间>设置属性
        8.在时间下创建<厂家>等信息（节点元素，相当于时间的子节点）
        9.<厂家>等信息创建空间设置内容（没有属性，属性是像时间那样的，这里只有文本信息）


        补充：
            1.时间与其后面的节点元素我们封装到一个函数中了：writeXML
    */
    }
    if(107 && 108)
    {
    /*
        补充：
            1.本次xml是记录当天的销售情况
            2.所以要进行最新的判断，并且要区分哪一天
            3.比如今天的就把所有变化都记录到今天中，以天（日期）为子节点，每次销售变化都是在子节点下的 节点元素
            4.错误提示相当重要，不要忘记，可以快速找到错误在哪

        流程：
            1.查找最后的子节点（最新判断）
            2.判断有没有当天日期,有当天的话，则在当天的日期子节点后添加时间节点写有效数据 即可
            3.没有当天日期(则添加新的日期子节点) 就是之前的创建子节点的方式即可
            4.将xml中已有的文件信息读取出来
                    1.与添加子节点前几步一样
                    2.关联成功后获取根节点与当天日期
                    3.判断有无子节点
                            1.有子节点的话，将该子节点与我们获取到的当天日期进行比较
                            2.将已有的子节点挨个从list中读取到QStringList中
            5.要能将改动后的数据库信息交互到xml文件中的节点元素中
                    1.把确认修改后的数据，更新到xml文件中（即挨个把ui界面对应控件信息存到list中，然后通过appendXML函数（添加子节点）添加到xml文件里）
                    2.将xml文件中的当天信息给取出来打印
    */
    }
    //用别人写好的类：即那两个柱状图与扇形图
    if(109)
    {
    /*
        1.删掉那两个工程中的user文件
        2.有用的：pie.cpp   pie.h （另一个也一样）打开pie的工程(打开.pro)，ui界面是已经提升过的了，取消提升，再提升一次也可以
        3.查看这俩工程的代码，理解他俩逻辑，
        4.打开他俩ui界面知道，他俩所属widget的框
        5.回到我们的主要工程，打开ui界面，找到分页的stackedWidget,第二页，即销售统计，要放俩图的框，拖俩Widget进去（俩图需要的类型）
        6.给俩图上加下拉框combo box，
        7.然后把那俩的主要的.h .cpp 复制到我们主工程里，添加现有文件
        8.俩Widget框，右击--提升，选中对应需要的图，进去要输入类名，先添加，类名与图所在的类名相同，（注意看他继承了哪个基类，不要错，名字也不要错）
        9.然后刚添加完新文件，需要关闭重进，否则无法运行
        1.然后用新的类，看一下代码逻辑就知道，要添加哪些，让它与数据库连接，更新数据到图上
    */
    }
}
